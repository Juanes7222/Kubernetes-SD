# Complete Kubernetes Deployment for Microservices Task Manager
# This file contains all resources needed for public deployment

---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: microservices-app
  labels:
    name: microservices-app
    app.kubernetes.io/name: microservices-app
    app.kubernetes.io/version: "1.0"

---
# Firebase Secret (You need to create this manually with your Firebase credentials)
# kubectl create secret generic firebase-credentials --from-file=kubernetes-sd.json=/path/to/your/firebase-credentials.json -n microservices-app

---
# Auth Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: microservices-app
  labels:
    app: auth-service
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
        version: v1
    spec:
      containers:
      - name: auth-service
        image: auth-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
        env:
        - name: PORT
          value: "8000"
        envFrom:
        - configMapRef:
            name: microservices-config
        volumeMounts:
        - name: firebase-credentials
          mountPath: "/app/secrets"
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: firebase-credentials
        secret:
          secretName: firebase-credentials
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: microservices-app
  labels:
    app: auth-service
spec:
  selector:
    app: auth-service
  ports:
  - name: http
    protocol: TCP
    port: 8000
    targetPort: 8000
  type: ClusterIP

---
# Tasks Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tasks-service
  namespace: microservices-app
  labels:
    app: tasks-service
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: tasks-service
  template:
    metadata:
      labels:
        app: tasks-service
        version: v1
    spec:
      containers:
      - name: tasks-service
        image: tasks-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8001
        env:
        - name: PORT
          value: "8001"
        - name: ENVIRONMENT
          value: "production"
        volumeMounts:
        - name: firebase-credentials
          mountPath: "/app/secrets"
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: firebase-credentials
        secret:
          secretName: firebase-credentials
---
apiVersion: v1
kind: Service
metadata:
  name: tasks-service
  namespace: microservices-app
  labels:
    app: tasks-service
spec:
  selector:
    app: tasks-service
  ports:
  - name: http
    protocol: TCP
    port: 8001
    targetPort: 8001
  type: ClusterIP

---
# Collaborator Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: collaborator-service
  namespace: microservices-app
  labels:
    app: collaborator-service
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: collaborator-service
  template:
    metadata:
      labels:
        app: collaborator-service
        version: v1
    spec:
      containers:
      - name: collaborator-service
        image: collaborator-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8002
        env:
        - name: PORT
          value: "8002"
        - name: ENVIRONMENT
          value: "production"
        volumeMounts:
        - name: firebase-credentials
          mountPath: "/app/secrets"
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8002
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: firebase-credentials
        secret:
          secretName: firebase-credentials
---
apiVersion: v1
kind: Service
metadata:
  name: collaborator-service
  namespace: microservices-app
  labels:
    app: collaborator-service
spec:
  selector:
    app: collaborator-service
  ports:
  - name: http
    protocol: TCP
    port: 8002
    targetPort: 8002
  type: ClusterIP

---
# Logs Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logs-service
  namespace: microservices-app
  labels:
    app: logs-service
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logs-service
  template:
    metadata:
      labels:
        app: logs-service
        version: v1
    spec:
      containers:
      - name: logs-service
        image: logs-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8003
        env:
        - name: PORT
          value: "8003"
        - name: ENVIRONMENT
          value: "production"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
        livenessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8003
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: logs-volume
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: logs-service
  namespace: microservices-app
  labels:
    app: logs-service
spec:
  selector:
    app: logs-service
  ports:
  - name: http
    protocol: TCP
    port: 8003
    targetPort: 8003
  type: ClusterIP

---
# Frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: microservices-app
  labels:
    app: frontend
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        version: v1
    spec:
      containers:
      - name: frontend
        image: frontend:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
        env:
        # Use relative URLs so the frontend works with any public domain/IP
        - name: REACT_APP_AUTH_SERVICE_URL
          value: ""
        - name: REACT_APP_TASKS_SERVICE_URL
          value: ""
        - name: REACT_APP_COLLABORATOR_SERVICE_URL
          value: ""
        - name: REACT_APP_LOGS_SERVICE_URL
          value: ""
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: microservices-app
  labels:
    app: frontend
spec:
  selector:
    app: frontend
  type: ClusterIP
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 80

---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: microservices-ingress
  namespace: microservices-app
  labels:
    app: microservices-ingress
  annotations:
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      # API services must come first to be matched before the frontend catch-all
      # Auth Service
      - path: /api/auth
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 8000

      # Tasks Service
      - path: /api/tasks
        pathType: Prefix
        backend:
          service:
            name: tasks-service
            port:
              number: 8001

      # Collaborator Service
      - path: /api/collaborator
        pathType: Prefix
        backend:
          service:
            name: collaborator-service
            port:
              number: 8002

      # Logs Service
      - path: /api/logs
        pathType: Prefix
        backend:
          service:
            name: logs-service
            port:
              number: 8003

      # Frontend (must be last as it catches all remaining paths)
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80
